using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Threading;
using VacationManager.Common.DataContracts;
using VacationManager.Common.ServiceContracts;
using VacationManager.Persistence;
using VacationManager.Services.Extensions;

namespace VacationManager.Services
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class VacationService : 
        IVacationRequestService, IVacationStatusService, IEmployeeService, IDisposable
    {
        private readonly VacationManagerContext _ctx = new VacationManagerContext();

        public VacationService()
        {
            // Initialize EF Profiler. Because of this you will be able to check SQL generated by EF.
            HibernatingRhinos.Profiler.Appender.EntityFramework.EntityFrameworkProfiler.Initialize();
        }

        public void Dispose()
        {
            _ctx.Dispose();
        }

        public VacationRequestDto CreateRequest(VacationRequestDto requestDto)
        {
            if (requestDto == null)
                throw new ArgumentNullException("requestDto");
            
            var employee = _ctx.Employees.FirstOrDefault(x => x.Id == requestDto.EmployeeId);
            if (employee == null)
                throw new ApplicationException(
                    string.Format("New request is associated with inexistent employee having id {0}.", requestDto.EmployeeId));

            var numberOfVacationDays = requestDto.VacationDays.Count();
            var numberOfVacationDaysLeft = _ctx.VacationStatus.Single(x => x.Employee.Id == requestDto.EmployeeId).Left;
            if ((numberOfVacationDays < 1) || (numberOfVacationDays > numberOfVacationDaysLeft))
                throw new ApplicationException(
                    string.Format("New request has invalid number of vacation days {0}. Must greather than 0 and less or equal than days left {1}.", numberOfVacationDays, numberOfVacationDays));

            var request = requestDto.ToModel(employee);
            _ctx.Requests.Add(request);
            _ctx.SaveChanges();

            return request.ToDto();
        }
        
        public void DeleteRequest(long id)
        {
            var request = _ctx.Requests.FirstOrDefault(x => x.RequestNumber == id);
            if (request == null)
                throw new ApplicationException(string.Format(
                    "Request number {0} was not found. It must exist in order to be deleted.", id));

            if (request.State != VacationRequestState.Submitted)
                throw new ApplicationException(string.Format(
                    "Request {0} was already {1}, cannot be deleted anymore. It must be in submited state in order to be deleted.",
                    id, request.State));

            _ctx.Requests.Remove(request);
            _ctx.SaveChanges();
        }

        public void ChangeRequestState(long id, VacationRequestState toState)
        {
            var request = _ctx.Requests.FirstOrDefault(x => x.RequestNumber == id);
            if (request == null)
                throw new ApplicationException(string.Format(
                    "Request number {0} was not found. It must exist in order to change it's state.", id));

            if (request.State != VacationRequestState.Submitted)
                throw new ApplicationException(string.Format(
                    "Request {0} was already {1}, cannot change it's state anymore. It must be in submited state in order to change it's state.",
                    id, request.State));

            request.State = toState;
            _ctx.SaveChanges();
        }

        public List<VacationRequestDto> SearchRequests(VacationRequestSearchCriteriaDto criteria)
        {
            if (criteria == null)
                return _ctx.Requests.ToList().ToDtos();

            var query = _ctx.Requests.AsQueryable();
            if (criteria.GetMine)
                query = query.Where(x => x.Employee.Id == criteria.EmployeeId);
            else
                query = query.Where(x => x.Employee.Manager.Id == criteria.EmployeeId);

            if (criteria.States != null)
                query = query.Where(x => criteria.States.Contains(x.State));

            var vacationRequestDtos = query.OrderByDescending(x => x.CreationDate).ToList().ToDtos();
            return vacationRequestDtos;
        }

        public VacationStatusDto GetVacationStatusByEmployeeId(long employeeId)
        {
            var vacationDays = _ctx.VacationStatus.FirstOrDefault(x => x.Employee.Id == employeeId);
            
            var vacationStatusDto = vacationDays.ToDto();
            return vacationStatusDto;
        }

        public EmployeeDto GetEmployeeById(long id)
        {
            // just checking if we have here the caller identity for some future automatic detection of the user calling the service
            var userName = Thread.CurrentPrincipal.Identity.Name;

            var employee = _ctx.Employees.Find(id);
            
            var employeeDto = employee.ToDto();
            return employeeDto;
        }
    }
}