using System;
using System.Collections.Generic;
using System.Linq;
using VacationManager.Common.DataContracts;
using VacationManager.Common.ServiceContracts;
using VacationManager.Services.Model;

namespace VacationManager.Services
{
    public class VacationService : 
        IVacationRequestService, IVacationDaysService, IEmployeeService
    {
        public VacationService()
        {
            // Initialize EF Profiler. Because of this you will be able to check SQL generated by EF.
            HibernatingRhinos.Profiler.Appender.EntityFramework.EntityFrameworkProfiler.Initialize();
        }

        public VacationRequestDto CreateRequest(VacationRequestDto requestDto)
        {
            if (requestDto == null)
                throw new ArgumentNullException("requestDto");
            
            using (var ctx = new VacationManagerContext())
            {
                var employee = ctx.Employees.FirstOrDefault(x => x.Id == requestDto.EmployeeId);
                if (employee == null)
                    throw new ApplicationException(
                        string.Format("New request is associated with inexistent employee having id {0}.", requestDto.EmployeeId));

                var numberOfVacationDays = requestDto.VacationDays.Count();
                var numberOfVacationDaysLeft = ctx.VacationDays.Single(x => x.Employee.Id == requestDto.EmployeeId).Left;
                if ((numberOfVacationDays < 1) || (numberOfVacationDays > numberOfVacationDaysLeft))
                    throw new ApplicationException(
                        string.Format("New request has invalid number of vacation days {0}. Must greather than 0 and less or equal than days left {1}.", numberOfVacationDays, numberOfVacationDays));

                var request = requestDto.ToEntity(employee);
                ctx.Requests.Add(request);
                ctx.SaveChanges();

                requestDto = request.ToDto();
            }

            return requestDto;
        }
        
        public void DeleteRequest(long id)
        {
            using (var ctx = new VacationManagerContext())
            {
                var request = ctx.Requests.FirstOrDefault(x => x.RequestNumber == id);
                if (request == null)
                    throw new ApplicationException(string.Format(
                        "Request number {0} was not found. It must exist in order to be deleted.", id));

                if (request.State != VacationRequestState.Submitted)
                    throw new ApplicationException(string.Format(
                        "Request {0} was already {1}, cannot be deleted anymore. It must be in submited state in order to be deleted.",
                        id, request.State));

                ctx.Requests.Remove(request);
                ctx.SaveChanges();
            }
        }

        public void ChangeRequestState(long id, VacationRequestState toState)
        {
            using (var ctx = new VacationManagerContext())
            {
                var request = ctx.Requests.FirstOrDefault(x => x.RequestNumber == id);
                if (request == null)
                    throw new ApplicationException(string.Format(
                        "Request number {0} was not found. It must exist in order to change it's state.", id));

                if (request.State != VacationRequestState.Submitted)
                    throw new ApplicationException(string.Format(
                        "Request {0} was already {1}, cannot change it's state anymore. It must be in submited state in order to change it's state.",
                        id, request.State));

                request.State = toState;
                ctx.SaveChanges();
            }
        }

        public List<VacationRequestDto> SearchRequests(VacationRequestSearchCriteriaDto criteria)
        {
            List<VacationRequestDto> vacationRequestDtos;
            using (var ctx = new VacationManagerContext())
            {
                if (criteria == null)
                    return ctx.Requests.ToList().ToDtos();

                var query = ctx.Requests.AsQueryable();
                if (criteria.GetMine)
                    query = query.Where(x => x.Employee.Id == criteria.EmployeeId);
                else
                    query = query.Where(x => x.Employee.Manager.Id == criteria.EmployeeId);

                if (criteria.States != null)
                    query = query.Where(x => criteria.States.Contains(x.State));

                vacationRequestDtos = query.OrderByDescending(x => x.CreationDate).ToList().ToDtos();
            }
            return vacationRequestDtos;
        }

        public VacationDaysDto GetVacationDaysByEmployeeId(long employeeId)
        {
            VacationDaysDto vacationDaysDto;
            using (var ctx = new VacationManagerContext())
            {
                var vacationDays = ctx.VacationDays.FirstOrDefault(x => x.Employee.Id == employeeId);
                vacationDaysDto = vacationDays.ToDto();
            }
            return vacationDaysDto;
        }

        public EmployeeDto GetEmployeeById(long id)
        {
            // just checking if we have here the caller identity for some future automatic detection of the user calling the service
            //var userName = Thread.CurrentPrincipal.Identity.Name;

            EmployeeDto employeeDto;
            using (var ctx = new VacationManagerContext())
            {
                var employee = ctx.Employees.Find(id);
                employeeDto = employee.ToDto();
            }
            return employeeDto;
        }
    }
}